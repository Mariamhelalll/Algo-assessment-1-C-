using System;
using System.Collections.Generic;
using System.IO;

// This code implements the linear searching algorithm for small datasets (256)
// Linear search is used to search for a user-defined value for a selected array
// Step 4 is also implemented in this code, where if the goal value doesn't exists in the array, then all values(s) and location(s) of the nearest value(s) are provided. 

class Searching
{
    static List <int> LinearSearch (int[] array, int goal)
    {
        List <int> indices= new List <int> (); // List for storing elements in the array that match the goal element chosen by the user.

        for (int i=0 ; i<array.Length ; i++)
        {
            if (array[i]==goal)// scans the array to find the desired value.
            {
                indices.Add(i); // Stores the found value's index if it matches the goal element chosen by the user.
            }
        }

        return indices;
    }

    // Method to provide value(s) and their location(s) of the nearest value(s) if the desired value chosen by the user is not in the selected array
    static Dictionary <int,List <int>> NearestValueSearch(int[] array, int goal)
    {
        int diffMinimum = int.MaxValue; // Ensures the starting point is the largest possible integer value, making sure that any difference found will be smaller that the int.MaxValue
        Dictionary <int,List<int>>  nearestValues= new Dictionary<int, List<int>>(); // Stores nearest value(s) and their index/indices.
        for(int i=0; i<array.Length ; i++)
        {
            int difference= Math.Abs(array[i]-goal);
            if(difference<diffMinimum)
            {
                diffMinimum=difference;
                nearestValues.Clear();
                nearestValues[array[i]];
                new List<int> {i}; // Add to dictionary
            }

            else if (difference=diffMinimum)
            {
                if (!nearestValues.ContainsKey(array[i]))
                {
                    nearestValues[array[i]]=new List <int> (); // creating a new list
                    nearestValues[array[i]].Add[i];// Add index to the list

                }
            }
        }

        return nearestValues;



    }

    // Method for searching linearly for the user-chosen value and displaying its index/ indices in the selected array.
    static void SearchValue(int[] array , int goal)
    {
        List <int> indices = LinearSearch(array,goal);
        if (indices.Count>0)
        {
            Console.WriteLine($"The value {goal} is found at the indices {string.Join(",",indices )}"); // Provides the loaction(s) of the desired value chosen by the user.

            
        }

        else
        {
            Console.WriteLine($"The value {goal} is not present in this array ! ");
            Dictionary<int,List<int>> nearest= NearestValueSearch(array,goal);

        }
        
    } 

    // Method to read file and convert it into an integer array

    static int[] AssignFileToArray(string filePath)
    {
        try
        {
            string[] lines= File.ReadAllLines(filePath);
            int[] info= Array.ConvertAll(lines, int.Parse);
            return info;
        }

        catch (Exception ex)
        {
            Console.WriteLine($"Error reading this file: {ex.Message}");
            return new int[0]; // if an error occurs, the method returns an empty array to prevent any crashes.
        }
    }

    // Main method

    static void Main()
    {
        // reading the selected file name.
        Console.Write("Enter the required file name : (Eg: Share_1_256.txt)");
        string filePath= Console.ReadLine();
        
        // Error handling using (if)
        if (!File.Exists(filePath))
        {
            Console.WriteLine("No file found !");
            return;
        }

        // reading file content

        int [] array = AssignFileToArray(filePath);
        if (array.Length==0)
        {
            Console.WriteLine("This file is empty !");
            return;
        }
        
        //Ask user for the goal value
        Console.Write("Please enter a value to search for: ");
        int goal;

        // Error handling for invalid input (non- numerical values enetered by the user)
        while(!int.TryParse(Console.ReadLine(), out goal))
        {
            Console.Write("Input is invalid ! Please enter a numeric value : ");

        }

        // Executing the  linear search algorithm
        SearchValue(array,goal);
        


    }

}

